/*
 * This file is generated by jOOQ.
 */
package com.examsystem.jooq.generated.tables;


import com.examsystem.jooq.generated.DefaultSchema;
import com.examsystem.jooq.generated.Keys;
import com.examsystem.jooq.generated.tables.Examinations.ExaminationsPath;
import com.examsystem.jooq.generated.tables.StudentExaminations.StudentExaminationsPath;
import com.examsystem.jooq.generated.tables.records.MembersRecord;

import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Check;
import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Members extends TableImpl<MembersRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>members</code>
     */
    public static final Members MEMBERS = new Members();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MembersRecord> getRecordType() {
        return MembersRecord.class;
    }

    /**
     * The column <code>members.id</code>.
     */
    public final TableField<MembersRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.identity(true), this, "");

    /**
     * The column <code>members.username</code>.
     */
    public final TableField<MembersRecord, String> USERNAME = createField(DSL.name("username"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>members.password</code>.
     */
    public final TableField<MembersRecord, String> PASSWORD = createField(DSL.name("password"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>members.name</code>.
     */
    public final TableField<MembersRecord, String> NAME = createField(DSL.name("name"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>members.gender</code>.
     */
    public final TableField<MembersRecord, String> GENDER = createField(DSL.name("gender"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>members.age</code>.
     */
    public final TableField<MembersRecord, String> AGE = createField(DSL.name("age"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>members.department</code>.
     */
    public final TableField<MembersRecord, String> DEPARTMENT = createField(DSL.name("department"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>members.position</code>.
     */
    public final TableField<MembersRecord, String> POSITION = createField(DSL.name("position"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>members.type</code>.
     */
    public final TableField<MembersRecord, String> TYPE = createField(DSL.name("type"), SQLDataType.CLOB.nullable(false), this, "");

    private Members(Name alias, Table<MembersRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Members(Name alias, Table<MembersRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>members</code> table reference
     */
    public Members(String alias) {
        this(DSL.name(alias), MEMBERS);
    }

    /**
     * Create an aliased <code>members</code> table reference
     */
    public Members(Name alias) {
        this(alias, MEMBERS);
    }

    /**
     * Create a <code>members</code> table reference
     */
    public Members() {
        this(DSL.name("members"), null);
    }

    public <O extends Record> Members(Table<O> path, ForeignKey<O, MembersRecord> childPath, InverseForeignKey<O, MembersRecord> parentPath) {
        super(path, childPath, parentPath, MEMBERS);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class MembersPath extends Members implements Path<MembersRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> MembersPath(Table<O> path, ForeignKey<O, MembersRecord> childPath, InverseForeignKey<O, MembersRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private MembersPath(Name alias, Table<MembersRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public MembersPath as(String alias) {
            return new MembersPath(DSL.name(alias), this);
        }

        @Override
        public MembersPath as(Name alias) {
            return new MembersPath(alias, this);
        }

        @Override
        public MembersPath as(Table<?> alias) {
            return new MembersPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public Identity<MembersRecord, Integer> getIdentity() {
        return (Identity<MembersRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<MembersRecord> getPrimaryKey() {
        return Keys.MEMBERS__PK_MEMBERS;
    }

    private transient StudentExaminationsPath _studentExaminations;

    /**
     * Get the implicit to-many join path to the
     * <code>student_examinations</code> table
     */
    public StudentExaminationsPath studentExaminations() {
        if (_studentExaminations == null)
            _studentExaminations = new StudentExaminationsPath(this, null, Keys.STUDENT_EXAMINATIONS__FK_STUDENT_EXAMINATIONS_PK_MEMBERS.getInverseKey());

        return _studentExaminations;
    }

    /**
     * Get the implicit many-to-many join path to the <code>examinations</code>
     * table
     */
    public ExaminationsPath examinations() {
        return studentExaminations().examinations();
    }

    @Override
    public List<Check<MembersRecord>> getChecks() {
        return Arrays.asList(
            Internal.createCheck(this, DSL.name(""), "type in ('Teacher', 'Student')", true)
        );
    }

    @Override
    public Members as(String alias) {
        return new Members(DSL.name(alias), this);
    }

    @Override
    public Members as(Name alias) {
        return new Members(alias, this);
    }

    @Override
    public Members as(Table<?> alias) {
        return new Members(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Members rename(String name) {
        return new Members(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Members rename(Name name) {
        return new Members(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Members rename(Table<?> name) {
        return new Members(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Members where(Condition condition) {
        return new Members(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Members where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Members where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Members where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Members where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Members where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Members where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Members where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Members whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Members whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
