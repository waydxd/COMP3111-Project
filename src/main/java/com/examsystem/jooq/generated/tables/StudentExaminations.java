/*
 * This file is generated by jOOQ.
 */
package com.examsystem.jooq.generated.tables;


import com.examsystem.jooq.generated.DefaultSchema;
import com.examsystem.jooq.generated.Keys;
import com.examsystem.jooq.generated.tables.Examinations.ExaminationsPath;
import com.examsystem.jooq.generated.tables.Members.MembersPath;
import com.examsystem.jooq.generated.tables.records.StudentExaminationsRecord;

import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class StudentExaminations extends TableImpl<StudentExaminationsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>student_examinations</code>
     */
    public static final StudentExaminations STUDENT_EXAMINATIONS = new StudentExaminations();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<StudentExaminationsRecord> getRecordType() {
        return StudentExaminationsRecord.class;
    }

    /**
     * The column <code>student_examinations.student_id</code>.
     */
    public final TableField<StudentExaminationsRecord, Integer> STUDENT_ID = createField(DSL.name("student_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>student_examinations.examination_id</code>.
     */
    public final TableField<StudentExaminationsRecord, Integer> EXAMINATION_ID = createField(DSL.name("examination_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>student_examinations.score</code>.
     */
    public final TableField<StudentExaminationsRecord, Float> SCORE = createField(DSL.name("score"), SQLDataType.REAL.nullable(false), this, "");

    private StudentExaminations(Name alias, Table<StudentExaminationsRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private StudentExaminations(Name alias, Table<StudentExaminationsRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>student_examinations</code> table reference
     */
    public StudentExaminations(String alias) {
        this(DSL.name(alias), STUDENT_EXAMINATIONS);
    }

    /**
     * Create an aliased <code>student_examinations</code> table reference
     */
    public StudentExaminations(Name alias) {
        this(alias, STUDENT_EXAMINATIONS);
    }

    /**
     * Create a <code>student_examinations</code> table reference
     */
    public StudentExaminations() {
        this(DSL.name("student_examinations"), null);
    }

    public <O extends Record> StudentExaminations(Table<O> path, ForeignKey<O, StudentExaminationsRecord> childPath, InverseForeignKey<O, StudentExaminationsRecord> parentPath) {
        super(path, childPath, parentPath, STUDENT_EXAMINATIONS);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class StudentExaminationsPath extends StudentExaminations implements Path<StudentExaminationsRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> StudentExaminationsPath(Table<O> path, ForeignKey<O, StudentExaminationsRecord> childPath, InverseForeignKey<O, StudentExaminationsRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private StudentExaminationsPath(Name alias, Table<StudentExaminationsRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public StudentExaminationsPath as(String alias) {
            return new StudentExaminationsPath(DSL.name(alias), this);
        }

        @Override
        public StudentExaminationsPath as(Name alias) {
            return new StudentExaminationsPath(alias, this);
        }

        @Override
        public StudentExaminationsPath as(Table<?> alias) {
            return new StudentExaminationsPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public UniqueKey<StudentExaminationsRecord> getPrimaryKey() {
        return Keys.STUDENT_EXAMINATIONS__PK_STUDENT_EXAMINATIONS;
    }

    @Override
    public List<ForeignKey<StudentExaminationsRecord, ?>> getReferences() {
        return Arrays.asList(Keys.STUDENT_EXAMINATIONS__FK_STUDENT_EXAMINATIONS_PK_EXAMINATIONS, Keys.STUDENT_EXAMINATIONS__FK_STUDENT_EXAMINATIONS_PK_MEMBERS);
    }

    private transient ExaminationsPath _examinations;

    /**
     * Get the implicit join path to the <code>examinations</code> table.
     */
    public ExaminationsPath examinations() {
        if (_examinations == null)
            _examinations = new ExaminationsPath(this, Keys.STUDENT_EXAMINATIONS__FK_STUDENT_EXAMINATIONS_PK_EXAMINATIONS, null);

        return _examinations;
    }

    private transient MembersPath _members;

    /**
     * Get the implicit join path to the <code>members</code> table.
     */
    public MembersPath members() {
        if (_members == null)
            _members = new MembersPath(this, Keys.STUDENT_EXAMINATIONS__FK_STUDENT_EXAMINATIONS_PK_MEMBERS, null);

        return _members;
    }

    @Override
    public StudentExaminations as(String alias) {
        return new StudentExaminations(DSL.name(alias), this);
    }

    @Override
    public StudentExaminations as(Name alias) {
        return new StudentExaminations(alias, this);
    }

    @Override
    public StudentExaminations as(Table<?> alias) {
        return new StudentExaminations(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public StudentExaminations rename(String name) {
        return new StudentExaminations(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public StudentExaminations rename(Name name) {
        return new StudentExaminations(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public StudentExaminations rename(Table<?> name) {
        return new StudentExaminations(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public StudentExaminations where(Condition condition) {
        return new StudentExaminations(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public StudentExaminations where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public StudentExaminations where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public StudentExaminations where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public StudentExaminations where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public StudentExaminations where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public StudentExaminations where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public StudentExaminations where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public StudentExaminations whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public StudentExaminations whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
