/*
 * This file is generated by jOOQ.
 */
package com.examsystem.jooq.generated.tables;


import com.examsystem.jooq.generated.DefaultSchema;
import com.examsystem.jooq.generated.Keys;
import com.examsystem.jooq.generated.tables.records.GradesRecord;

import java.util.Collection;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Grades extends TableImpl<GradesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>grades</code>
     */
    public static final Grades GRADES = new Grades();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<GradesRecord> getRecordType() {
        return GradesRecord.class;
    }

    /**
     * The column <code>grades.id</code>.
     */
    public final TableField<GradesRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.identity(true), this, "");

    /**
     * The column <code>grades.student_name</code>.
     */
    public final TableField<GradesRecord, String> STUDENT_NAME = createField(DSL.name("student_name"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>grades.course_name</code>.
     */
    public final TableField<GradesRecord, String> COURSE_NAME = createField(DSL.name("course_name"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>grades.exam_name</code>.
     */
    public final TableField<GradesRecord, String> EXAM_NAME = createField(DSL.name("exam_name"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>grades.score</code>.
     */
    public final TableField<GradesRecord, Float> SCORE = createField(DSL.name("score"), SQLDataType.REAL.nullable(false), this, "");

    /**
     * The column <code>grades.full_score</code>.
     */
    public final TableField<GradesRecord, Float> FULL_SCORE = createField(DSL.name("full_score"), SQLDataType.REAL.nullable(false), this, "");

    /**
     * The column <code>grades.time_spent</code>.
     */
    public final TableField<GradesRecord, Float> TIME_SPENT = createField(DSL.name("time_spent"), SQLDataType.REAL.nullable(false), this, "");

    private Grades(Name alias, Table<GradesRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Grades(Name alias, Table<GradesRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>grades</code> table reference
     */
    public Grades(String alias) {
        this(DSL.name(alias), GRADES);
    }

    /**
     * Create an aliased <code>grades</code> table reference
     */
    public Grades(Name alias) {
        this(alias, GRADES);
    }

    /**
     * Create a <code>grades</code> table reference
     */
    public Grades() {
        this(DSL.name("grades"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public Identity<GradesRecord, Integer> getIdentity() {
        return (Identity<GradesRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<GradesRecord> getPrimaryKey() {
        return Keys.GRADES__PK_GRADES;
    }

    @Override
    public Grades as(String alias) {
        return new Grades(DSL.name(alias), this);
    }

    @Override
    public Grades as(Name alias) {
        return new Grades(alias, this);
    }

    @Override
    public Grades as(Table<?> alias) {
        return new Grades(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Grades rename(String name) {
        return new Grades(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Grades rename(Name name) {
        return new Grades(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Grades rename(Table<?> name) {
        return new Grades(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Grades where(Condition condition) {
        return new Grades(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Grades where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Grades where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Grades where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Grades where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Grades where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Grades where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Grades where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Grades whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Grades whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
