/*
 * This file is generated by jOOQ.
 */
package com.examsystem.jooq.generated.tables;


import com.examsystem.jooq.generated.DefaultSchema;
import com.examsystem.jooq.generated.Keys;
import com.examsystem.jooq.generated.tables.Examinations.ExaminationsPath;
import com.examsystem.jooq.generated.tables.Questions.QuestionsPath;
import com.examsystem.jooq.generated.tables.records.ExaminationQuestionsRecord;

import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ExaminationQuestions extends TableImpl<ExaminationQuestionsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>examination_questions</code>
     */
    public static final ExaminationQuestions EXAMINATION_QUESTIONS = new ExaminationQuestions();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ExaminationQuestionsRecord> getRecordType() {
        return ExaminationQuestionsRecord.class;
    }

    /**
     * The column <code>examination_questions.examination_id</code>.
     */
    public final TableField<ExaminationQuestionsRecord, Integer> EXAMINATION_ID = createField(DSL.name("examination_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>examination_questions.question_id</code>.
     */
    public final TableField<ExaminationQuestionsRecord, Integer> QUESTION_ID = createField(DSL.name("question_id"), SQLDataType.INTEGER.nullable(false), this, "");

    private ExaminationQuestions(Name alias, Table<ExaminationQuestionsRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private ExaminationQuestions(Name alias, Table<ExaminationQuestionsRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>examination_questions</code> table reference
     */
    public ExaminationQuestions(String alias) {
        this(DSL.name(alias), EXAMINATION_QUESTIONS);
    }

    /**
     * Create an aliased <code>examination_questions</code> table reference
     */
    public ExaminationQuestions(Name alias) {
        this(alias, EXAMINATION_QUESTIONS);
    }

    /**
     * Create a <code>examination_questions</code> table reference
     */
    public ExaminationQuestions() {
        this(DSL.name("examination_questions"), null);
    }

    public <O extends Record> ExaminationQuestions(Table<O> path, ForeignKey<O, ExaminationQuestionsRecord> childPath, InverseForeignKey<O, ExaminationQuestionsRecord> parentPath) {
        super(path, childPath, parentPath, EXAMINATION_QUESTIONS);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class ExaminationQuestionsPath extends ExaminationQuestions implements Path<ExaminationQuestionsRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> ExaminationQuestionsPath(Table<O> path, ForeignKey<O, ExaminationQuestionsRecord> childPath, InverseForeignKey<O, ExaminationQuestionsRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private ExaminationQuestionsPath(Name alias, Table<ExaminationQuestionsRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public ExaminationQuestionsPath as(String alias) {
            return new ExaminationQuestionsPath(DSL.name(alias), this);
        }

        @Override
        public ExaminationQuestionsPath as(Name alias) {
            return new ExaminationQuestionsPath(alias, this);
        }

        @Override
        public ExaminationQuestionsPath as(Table<?> alias) {
            return new ExaminationQuestionsPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public UniqueKey<ExaminationQuestionsRecord> getPrimaryKey() {
        return Keys.EXAMINATION_QUESTIONS__PK_EXAMINATION_QUESTIONS;
    }

    @Override
    public List<ForeignKey<ExaminationQuestionsRecord, ?>> getReferences() {
        return Arrays.asList(Keys.EXAMINATION_QUESTIONS__FK_EXAMINATION_QUESTIONS_PK_EXAMINATIONS, Keys.EXAMINATION_QUESTIONS__FK_EXAMINATION_QUESTIONS_PK_QUESTIONS);
    }

    private transient ExaminationsPath _examinations;

    /**
     * Get the implicit join path to the <code>examinations</code> table.
     */
    public ExaminationsPath examinations() {
        if (_examinations == null)
            _examinations = new ExaminationsPath(this, Keys.EXAMINATION_QUESTIONS__FK_EXAMINATION_QUESTIONS_PK_EXAMINATIONS, null);

        return _examinations;
    }

    private transient QuestionsPath _questions;

    /**
     * Get the implicit join path to the <code>questions</code> table.
     */
    public QuestionsPath questions() {
        if (_questions == null)
            _questions = new QuestionsPath(this, Keys.EXAMINATION_QUESTIONS__FK_EXAMINATION_QUESTIONS_PK_QUESTIONS, null);

        return _questions;
    }

    @Override
    public ExaminationQuestions as(String alias) {
        return new ExaminationQuestions(DSL.name(alias), this);
    }

    @Override
    public ExaminationQuestions as(Name alias) {
        return new ExaminationQuestions(alias, this);
    }

    @Override
    public ExaminationQuestions as(Table<?> alias) {
        return new ExaminationQuestions(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public ExaminationQuestions rename(String name) {
        return new ExaminationQuestions(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ExaminationQuestions rename(Name name) {
        return new ExaminationQuestions(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public ExaminationQuestions rename(Table<?> name) {
        return new ExaminationQuestions(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ExaminationQuestions where(Condition condition) {
        return new ExaminationQuestions(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ExaminationQuestions where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ExaminationQuestions where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ExaminationQuestions where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ExaminationQuestions where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ExaminationQuestions where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ExaminationQuestions where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ExaminationQuestions where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ExaminationQuestions whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ExaminationQuestions whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
